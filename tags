!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Add3v3v	math/vec3.go	/^func Add3v3v(vec1, vec2 Vec3) Vec3 {$/;"	d
AddQuest	component/quest/manager.go	/^func (qm *QuestManager) AddQuest(id component.GOiD, state QuestState) {$/;"	d
AiComputer	component/ai/computer.go	/^type AiComputer func(id component.GOiD, eventlink chan event.Event)$/;"	d
AiManager	component/ai/manager.go	/^type AiManager struct {$/;"	d
Array	common/queue.go	/^func (stk *Queue) Array() []interface{} {$/;"	d
Array	common/vector.go	/^func (vc *Vector) Array() []interface{} {$/;"	d
AttackEvent	event/events.go	/^type AttackEvent struct {$/;"	d
AttackQuest	component/quest/states.go	/^func (qm *QuestManager) AttackQuest(id component.GOiD, evt event.Event) {$/;"	d
CharacterAttributes	component/character/character.go	/^type CharacterAttributes struct {$/;"	d
CharacterManager	component/character/manager.go	/^type CharacterManager struct {$/;"	d
CharacterMoveEvent	event/events.go	/^type CharacterMoveEvent struct {$/;"	d
ChatEvent	event/events.go	/^type ChatEvent struct {$/;"	d
Close	graphics/gl.go	/^func (glg *GlGraphicsManager) Close() {$/;"	d
ComponentManager	component/component.go	/^type ComponentManager interface {$/;"	d
ContainsPoint	math/frustum.go	/^func (frust *Frustum) ContainsPoint(vec Vec3) bool {$/;"	d
ContainsSphere	math/frustum.go	/^func (frust *Frustum) ContainsSphere(sp Sphere) int {$/;"	d
Create	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Create(compList component.GameObject, location math.Vec3) (component.GOiD, error) {$/;"	d
CreateComponent	component/ai/manager.go	/^func (am *AiManager) CreateComponent(id component.GOiD, computerType string) error {$/;"	d
CreateComponent	component/character/manager.go	/^func (cm *CharacterManager) CreateComponent(index component.GOiD, ca CharacterAttributes) error {$/;"	d
CreateComponent	component/physics/manager.go	/^func (pm *PhysicsManager) CreateComponent(id component.GOiD, radius float32) error {$/;"	d
CreateComponent	component/quest/manager.go	/^func (qm *QuestManager) CreateComponent(id component.GOiD) error {$/;"	d
CreateComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) CreateComponent(index component.GOiD) error {$/;"	d
CreateComponent	graphics/manager.go	/^func (gm *GraphicsManager) CreateComponent(id component.GOiD, gc graphicsComponent) error {$/;"	d
CreateFromMap	component/gofactory/manager.go	/^func (gof *GameObjectFactory) CreateFromMap(sceneMap *component.Map) ([]component.GOiD, error) {$/;"	d
CreateFromMap	instance/instance.go	/^func (is *Instance) CreateFromMap(mapName string) ([]component.GOiD, error) {$/;"	d
CreateObject	instance/instance.go	/^func (is *Instance) CreateObject(objName string, loc math.Vec3) (component.GOiD, error) {$/;"	d
Cross3v3v	math/vec3.go	/^func Cross3v3v(vec1, vec2 Vec3) (ret Vec3) {$/;"	d
DeathEvent	event/events.go	/^type DeathEvent struct {$/;"	d
Delete	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Delete(index component.GOiD) {$/;"	d
Delete	graphics/model.go	/^func (mh *Model) Delete() {$/;"	d
DeleteComponent	component/ai/manager.go	/^func (am *AiManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/character/manager.go	/^func (cm *CharacterManager) DeleteComponent(index component.GOiD) {$/;"	d
DeleteComponent	component/physics/manager.go	/^func (pm *PhysicsManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/quest/manager.go	/^func (qm *QuestManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) DeleteComponent(index component.GOiD) {$/;"	d
DeleteComponent	graphics/manager.go	/^func (gm *GraphicsManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteModel	graphics/gl.go	/^func (glg *GlGraphicsManager) DeleteModel(id component.GOiD) {$/;"	d
DeleteModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) DeleteModel(id component.GOiD) {$/;"	d
Dequeue	common/queue.go	/^func (stk *Queue) Dequeue() (interface{}, error) {$/;"	d
Difference	common/vector.go	/^func (vec1 *Vector) Difference(vec2 *Vector) *Vector {$/;"	d
Dist3v3v	math/vec3.go	/^func Dist3v3v(vec1, vec2 Vec3) float32 {$/;"	d
DistSqrd3v3v	math/vec3.go	/^func DistSqrd3v3v(vec1, vec2 Vec3) float32 {$/;"	d
Distance	math/plane.go	/^func (pl *Plane) Distance(vec Vec3) float32 {$/;"	d
Dot3v3v	math/vec3.go	/^func Dot3v3v(vec1, vec2 Vec3) float32 {$/;"	d
DrawString	graphics/gl.go	/^func (glg *GlGraphicsManager) DrawString(x, y float32, text string) {$/;"	d
DrawString	graphics/manager.go	/^func (gm *GraphicsManager) DrawString(x, y float32, text string) {$/;"	d
DrawString	graphics/text.go	/^func (tgh *TextGraphicsHandler) DrawString(x, y float32, text string) {$/;"	d
Empty	common/vector.go	/^func (vc *Vector) Empty() {$/;"	d
EnemyAi	component/ai/computer.go	/^func (am *AiManager) EnemyAi(id component.GOiD, eventlink chan event.Event) {$/;"	d
EnemyDecide	component/ai/computer.go	/^func (am *AiManager) EnemyDecide(id component.GOiD) {$/;"	d
Equal3v3v	math/vec3.go	/^func Equal3v3v(vec1, vec2 Vec3) bool {$/;"	d
Equals4m4m	math/mat4x4.go	/^func Equals4m4m(mat, mat2 Mat4x4) bool {$/;"	d
Erase	common/vector.go	/^func (vc *Vector) Erase(index int) {$/;"	d
Event	event/manager.go	/^type Event interface {$/;"	d
EventListener	event/manager.go	/^type EventListener func(evt Event)$/;"	d
EventManager	event/manager.go	/^type EventManager struct {$/;"	d
EventMessage	event/manager.go	/^type EventMessage struct {$/;"	d
FirstMoveQuest	component/quest/states.go	/^func (qm *QuestManager) FirstMoveQuest(id component.GOiD, evt event.Event) {$/;"	d
FragmentPointLightingRenderer	graphics/renderer.go	/^type FragmentPointLightingRenderer struct {$/;"	d
Frustum	math/frustum.go	/^type Frustum struct {$/;"	d
GOiD	component/component.go	/^type GOiD uint32$/;"	d
GameObject	component/component.go	/^type GameObject map[string][]byte$/;"	d
GameObjectFactory	component/gofactory/manager.go	/^type GameObjectFactory struct {$/;"	d
GetCharacterAttributes	component/character/manager.go	/^func (cm *CharacterManager) GetCharacterAttributes(index component.GOiD) *CharacterAttributes {$/;"	d
GetEventManager	instance/instance.go	/^func (is *Instance) GetEventManager() *event.EventManager {$/;"	d
GetEventType	event/events.go	/^func (at AttackEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ce ChatEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ce PlayerCreatedEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (cme CharacterMoveEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (dt DeathEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ke KillEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (qt QuestComplete) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (rae RunAiEvent) GetEventType() string {$/;"	d
GetFileContents	res/manager.go	/^func (rm *ResourceManager) GetFileContents(fileName string) []byte {$/;"	d
GetFileContents	res/manager.go	/^func GetFileContents(fileName string) []byte {$/;"	d
GetMatrixList	component/scenemanager/manager.go	/^func (tm *TransformManager) GetMatrixList() []math.Mat4x4 {$/;"	d
GetObjectLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectLocation(index component.GOiD) math.Vec3 {$/;"	d
GetObjectsInLocationRadius	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectsInLocationRadius(loc math.Vec3, lookRange float32) *common.Queue {$/;"	d
GetSceneManagerSnapshot	instance/instance.go	/^func (is *Instance) GetSceneManagerSnapshot() component.SceneManager {$/;"	d
GetSize	graphics/gl.go	/^func (glg *GlGraphicsManager) GetSize() (int, int) {$/;"	d
GetSize	graphics/manager.go	/^func (gm *GraphicsManager) GetSize() (int, int) {$/;"	d
GetSize	graphics/text.go	/^func (tgh *TextGraphicsHandler) GetSize() (int, int) {$/;"	d
GetTransform4m	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransform4m(index component.GOiD) (math.Mat4x4, error) {$/;"	d
GetTransformMatrix	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransformMatrix(index component.GOiD) (math.Mat4x4, error) {$/;"	d
GlGraphicsManager	graphics/gl.go	/^type GlGraphicsManager struct {$/;"	d
GlLoadTexture	graphics/image.go	/^func GlLoadTexture(filename string) gl.Texture {$/;"	d
GraphicsHandler	graphics/graphics.go	/^type GraphicsHandler interface {$/;"	d
GraphicsManager	graphics/manager.go	/^type GraphicsManager struct {$/;"	d
Greet	component/character/character.go	/^func (ca *CharacterAttributes) Greet() string {$/;"	d
HandleAttack	component/character/delegates.go	/^func (cm *CharacterManager) HandleAttack(evt event.Event) {$/;"	d
HandleChat	component/character/delegates.go	/^func (cm *CharacterManager) HandleChat(evt event.Event) {$/;"	d
HandleDeath	component/gofactory/manager.go	/^func (gof *GameObjectFactory) HandleDeath(evt event.Event) {$/;"	d
HandleEvent	component/quest/manager.go	/^func (qm *QuestManager) HandleEvent(evt event.Event) {$/;"	d
HandleInputs	graphics/gl.go	/^func (glg *GlGraphicsManager) HandleInputs() Inputs {$/;"	d
HandleInputs	graphics/manager.go	/^func (gm *GraphicsManager) HandleInputs(eye, target, up math.Vec3) (math.Vec3, math.Vec3, math.Vec3) {$/;"	d
HandleInputs	graphics/text.go	/^func (tgh *TextGraphicsHandler) HandleInputs() Inputs {$/;"	d
HandleInputs0	graphics/gl.go	/^func (glg *GlGraphicsManager) HandleInputs0(eye, target, up math.Vec3) (math.Vec3, math.Vec3, math.Vec3) {$/;"	d
Inputs	graphics/graphics.go	/^type Inputs struct {$/;"	d
Insert	common/vector.go	/^func (vc *Vector) Insert(data interface{}) int {$/;"	d
Instance	instance/instance.go	/^type Instance struct {$/;"	d
Intersects	math/sphere.go	/^func (sp *Sphere) Intersects(sp2 Sphere) bool {$/;"	d
Inverse	math/mat4x4.go	/^\/\/func (mat Mat4x4) Inverse() Mat4x4 {$/;"	d
Inverse	math/mat4x4.go	/^func (mat Mat4x4) Inverse() Mat4x4 {$/;"	d
Invert	math/mat2x2.go	/^func (mat *Mat2x2) Invert() {$/;"	d
IsClosing	graphics/gl.go	/^func (glg *GlGraphicsManager) IsClosing() bool {$/;"	d
IsEmpty	common/queue.go	/^func (stk *Queue) IsEmpty() bool {$/;"	d
IsEmpty	common/stack.go	/^func (stk *Stack) IsEmpty() bool {$/;"	d
IsEmpty	common/vector.go	/^func (vc *Vector) IsEmpty() bool {$/;"	d
IsEmpty	math/mat4x4.go	/^func (m *Mat4x4) IsEmpty() bool {$/;"	d
IsInside	math/plane.go	/^func (pl *Plane) IsInside(vec Vec3) bool {$/;"	d
IsOnPlane	math/plane.go	/^func (pl *Plane) IsOnPlane(vec Vec3) bool {$/;"	d
JsonCreate	component/ai/manager.go	/^func (am *AiManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/character/manager.go	/^func (cm *CharacterManager) JsonCreate(index component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/physics/manager.go	/^func (pm *PhysicsManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/quest/manager.go	/^func (qm *QuestManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	graphics/manager.go	/^func (gm *GraphicsManager) JsonCreate(id component.GOiD, compData []byte) error {$/;"	d
KillEvent	event/events.go	/^type KillEvent struct {$/;"	d
KillQuest	component/quest/states.go	/^func (qm *QuestManager) KillQuest(id component.GOiD, evt event.Event) {$/;"	d
LinkProgram	graphics/gl.go	/^func LinkProgram(program gl.Program, shaderList []gl.Shader) [NUMATTR]gl.AttribLocation {$/;"	d
LoadFont	graphics/gl.go	/^func (glg *GlGraphicsManager) LoadFont() {$/;"	d
LoadGameObject	res/manager.go	/^func (rm *ResourceManager) LoadGameObject(objType string) component.GameObject {$/;"	d
LoadJsonMap	res/manager.go	/^func (rm *ResourceManager) LoadJsonMap(mapName string) component.Map {$/;"	d
LoadModel	graphics/gl.go	/^func (glg *GlGraphicsManager) LoadModel(id component.GOiD, comp graphicsComponent) error {$/;"	d
LoadModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) LoadModel(id component.GOiD, gc graphicsComponent) error {$/;"	d
LoadModelWavefront	res/manager.go	/^func (rm *ResourceManager) LoadModelWavefront(modelName string) (*common.Vector, *common.Vector, *common.Vector, *common.Vector, float32) {$/;"	d
LoadShader	graphics/gl.go	/^func LoadShader(shadType gl.GLenum, shadStr string) gl.Shader {$/;"	d
LogErr	common/log.go	/^var LogErr, LogWarn, LogInfo *log.Logger$/;"	d
LookAt	math/frustum.go	/^func (frust *Frustum) LookAt(target, eye, up Vec3) {$/;"	d
LookAtMatrix	math/frustum.go	/^func (frust *Frustum) LookAtMatrix() Mat4x4 {$/;"	d
Loop	instance/instance.go	/^func (is *Instance) Loop() {$/;"	d
Mag3v	math/vec3.go	/^func Mag3v(vec Vec3) float32 {$/;"	d
Mag4v	math/vec4.go	/^func Mag4v(vec Vec4) float32 {$/;"	d
MagSqrd3v	math/vec3.go	/^func MagSqrd3v(vec Vec3) float32 {$/;"	d
MagSqrd4v	math/vec4.go	/^func MagSqrd4v(vec Vec4) float32 {$/;"	d
MakeAiManager	component/ai/manager.go	/^func MakeAiManager(tm *scenemanager.TransformManager, cm *character.CharacterManager, em *event.EventManager) *AiManager {$/;"	d
MakeCharacterManager	component/character/manager.go	/^func MakeCharacterManager(tm *scenemanager.TransformManager, em *event.EventManager) *CharacterManager {$/;"	d
MakeEventManager	event/manager.go	/^func MakeEventManager() *EventManager {$/;"	d
MakeFragmentPointLightingRenderer	graphics/renderer.go	/^func MakeFragmentPointLightingRenderer(rm *res.ResourceManager, glg *GlGraphicsManager) Renderer {$/;"	d
MakeFrustum	math/frustum.go	/^func MakeFrustum(nearDist, farDist, fov, aspect float32) *Frustum {$/;"	d
MakeGameObjectFactory	component/gofactory/manager.go	/^func MakeGameObjectFactory(tm *scenemanager.TransformManager) *GameObjectFactory {$/;"	d
MakeGlGraphicsManager	graphics/gl.go	/^func MakeGlGraphicsManager(sizeX, sizeY int, title string, rm *res.ResourceManager) *GlGraphicsManager {$/;"	d
MakeGraphicsManager	graphics/manager.go	/^func MakeGraphicsManager(window *GlGraphicsManager, rm *res.ResourceManager) *GraphicsManager {$/;"	d
MakeIdentity	math/mat4x4.go	/^func (m *Mat4x4) MakeIdentity() {$/;"	d
MakeInstance	instance/instance.go	/^func MakeInstance(returnlink chan bool, rm *res.ResourceManager, gm *graphics.GraphicsManager) *Instance {$/;"	d
MakeModel	graphics/model.go	/^func MakeModel(vertexList []math.Vec3, indexList []uint32, normalList []math.Vec3, texUvList []math.Vec2) Model {$/;"	d
MakePerspectiveMatrix	math/mat4x4.go	/^func MakePerspectiveMatrix(near, far, fov, aspect float32) (mat Mat4x4) {$/;"	d
MakePhysicsManager	component/physics/manager.go	/^func MakePhysicsManager(sm component.SceneManager) *PhysicsManager {$/;"	d
MakePlane	math/plane.go	/^func MakePlane(p1, p2, p3 Vec3) Plane {$/;"	d
MakeQuestManager	component/quest/manager.go	/^func MakeQuestManager(em *event.EventManager) *QuestManager {$/;"	d
MakeResourceManager	res/manager.go	/^func MakeResourceManager(fileDepot string) *ResourceManager {$/;"	d
MakeTextGraphicsHandler	graphics/text.go	/^func MakeTextGraphicsHandler() *TextGraphicsHandler {$/;"	d
MakeTransformManager	component/scenemanager/manager.go	/^func MakeTransformManager(em *event.EventManager) *TransformManager {$/;"	d
MakeVector	common/vector.go	/^func MakeVector() *Vector {$/;"	d
Map	component/component.go	/^type Map []MapLocation$/;"	d
MapEntity	component/component.go	/^type MapEntity struct {$/;"	d
MapLocation	component/component.go	/^type MapLocation struct {$/;"	d
Mat2x2	math/mat2x2.go	/^type Mat2x2 [4]float32$/;"	d
Mat4x4	math/mat4x4.go	/^type Mat4x4 [16]float32$/;"	d
Model	graphics/model.go	/^type Model struct {$/;"	d
Mult	math/mat2x2.go	/^func (mat *Mat2x2) Mult(scalar float32) {$/;"	d
Mult3vf	math/vec3.go	/^func Mult3vf(vec Vec3, scalar float32) Vec3 {$/;"	d
Mult4m3v	math/vec3.go	/^func Mult4m3v(mat Mat4x4, vec Vec3) Vec3 {$/;"	d
Mult4m4m	math/mat4x4.go	/^func Mult4m4m(mat1, mat2 Mat4x4) Mat4x4 {$/;"	d
Mult4m4mj	math/mat4x4.go	/^\/\/ func Mult4m4mj(mat1, mat2 Mat4x4) (ret Mat4x4) {$/;"	d
Mult4m4v	math/vec4.go	/^func Mult4m4v(mat Mat4x4, vec Vec4) Vec4 {$/;"	d
Mult4v4v	math/vec4.go	/^func Mult4v4v(vec1, vec2 Vec4) (ret Vec4) {$/;"	d
Normalize	math/plane.go	/^func (pl *Plane) Normalize() {$/;"	d
Normalize3v	math/vec3.go	/^func Normalize3v(vec Vec3) Vec3 {$/;"	d
ParsePlayerCommand	component/character/player.go	/^func ParsePlayerCommand(command string, id component.GOiD, chars *CharacterManager) {$/;"	d
ParseSysConsole	instance/instance.go	/^func (is *Instance) ParseSysConsole() {$/;"	d
Peek	common/queue.go	/^func (stk *Queue) Peek() interface{} {$/;"	d
PhysicsManager	component/physics/manager.go	/^type PhysicsManager struct {$/;"	d
Plane	math/plane.go	/^type Plane Vec4$/;"	d
PlayerAi	component/ai/computer.go	/^func (am *AiManager) PlayerAi(id component.GOiD, eventlink chan event.Event) {$/;"	d
PlayerAttack	component/character/player.go	/^func PlayerAttack(player, enemy component.GOiD, chars *CharacterManager) {$/;"	d
PlayerCreatedEvent	event/events.go	/^type PlayerCreatedEvent struct {$/;"	d
PlayerDecide	component/ai/computer.go	/^func (am *AiManager) PlayerDecide(id component.GOiD) {$/;"	d
PlayerLook	component/character/player.go	/^func PlayerLook(id component.GOiD, chars *CharacterManager) {$/;"	d
PlayerMove	component/character/player.go	/^func PlayerMove(direction string, id component.GOiD, chars *CharacterManager) {$/;"	d
Pop	common/stack.go	/^func (stk *Stack) Pop() interface{} {$/;"	d
Projection	math/frustum.go	/^func (frust *Frustum) Projection() Mat4x4 {$/;"	d
Push	common/stack.go	/^func (stk *Stack) Push(val interface{}) {$/;"	d
Push_back	common/vector.go	/^func (vc *Vector) Push_back(data interface{}, resizeStep, checkDistance int) {$/;"	d
QuestComplete	component/quest/manager.go	/^func (qm *QuestManager) QuestComplete(evt event.Event) {$/;"	d
QuestComplete	event/events.go	/^type QuestComplete struct {$/;"	d
QuestManager	component/quest/manager.go	/^type QuestManager struct {$/;"	d
QuestState	component/quest/states.go	/^type QuestState func(id component.GOiD, evt event.Event)$/;"	d
Queue	common/queue.go	/^func (stk *Queue) Queue(a interface{}) {$/;"	d
Queue	common/queue.go	/^type Queue struct {$/;"	d
Register	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Register(compType string, mang component.ComponentManager, creationFunc creationFunction) error {$/;"	d
RegisterComputer	component/ai/manager.go	/^func (am *AiManager) RegisterComputer(aiType string, computer AiComputer) {$/;"	d
RegisterGraphicsHandler	graphics/manager.go	/^func (gm *GraphicsManager) RegisterGraphicsHandler(handler GraphicsHandler) {$/;"	d
RegisterListener	event/manager.go	/^func (em *EventManager) RegisterListener(eventType string, listener EventListener) {$/;"	d
RegisterListeningChannel	event/manager.go	/^func (em *EventManager) RegisterListeningChannel(eventType string, eventlink chan Event) {$/;"	d
Render	graphics/gl.go	/^func (glg *GlGraphicsManager) Render(ids *common.Vector, sm component.SceneManager, cam *math.Frustum) {$/;"	d
Render	graphics/renderer.go	/^func (fplr *FragmentPointLightingRenderer) Render(mod Model, transMat, camMat, projectMat math.Mat4x4) {$/;"	d
Render	graphics/text.go	/^func (tgh *TextGraphicsHandler) Render(ids *common.Vector, sm component.SceneManager, cam *math.Frustum) {$/;"	d
RenderAll	graphics/manager.go	/^func (gm *GraphicsManager) RenderAll(camera *math.Frustum, sm component.SceneManager) {$/;"	d
Renderer	graphics/renderer.go	/^type Renderer interface {$/;"	d
ResourceManager	res/manager.go	/^type ResourceManager struct {$/;"	d
RunAi	component/ai/manager.go	/^func (am *AiManager) RunAi(id component.GOiD) {$/;"	d
RunAiEvent	event/events.go	/^type RunAiEvent struct {$/;"	d
SceneManager	component/component.go	/^type SceneManager interface {$/;"	d
Send	event/manager.go	/^func (em *EventManager) Send(evt Event) {$/;"	d
SetLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocation(index component.GOiD, newLocation math.Vec3) {$/;"	d
SetLocationOverTime	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocationOverTime(id component.GOiD, newLocation math.Vec3, timeToMove float64) {$/;"	d
SetTransform	component/scenemanager/manager.go	/^func (tm *TransformManager) SetTransform(index component.GOiD, newLocalMat math.Mat4x4) {$/;"	d
SetUpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) SetUpdateAiNearPlayer(yes bool) {$/;"	d
Sort	event/manager.go	/^func (em *EventManager) Sort() {$/;"	d
Sphere	math/sphere.go	/^type Sphere struct {$/;"	d
Split	math/mat2x2.go	/^func (segs *Mat2x2) Split() (a, b, c, d float32) {$/;"	d
Stack	common/stack.go	/^type Stack struct {$/;"	d
StartScript	instance/script.go	/^func (is *Instance) StartScript() {$/;"	d
Sub3v3v	math/vec3.go	/^func Sub3v3v(vec1, vec2 Vec3) Vec3 {$/;"	d
TextGraphicsHandler	graphics/text.go	/^type TextGraphicsHandler struct {$/;"	d
Tick	component/ai/manager.go	/^func (am *AiManager) Tick(delta float64) {$/;"	d
Tick	component/character/manager.go	/^func (cm *CharacterManager) Tick(delta float64) {$/;"	d
Tick	component/physics/manager.go	/^func (pm *PhysicsManager) Tick(delta float64) {$/;"	d
Tick	component/quest/manager.go	/^func (qm *QuestManager) Tick(delta float64) {$/;"	d
Tick	component/scenemanager/manager.go	/^func (tm *TransformManager) Tick(delta float64) {$/;"	d
Tick	event/manager.go	/^func (em *EventManager) Tick(delta float64) {$/;"	d
Tick	graphics/gl.go	/^func (glg *GlGraphicsManager) Tick() bool {$/;"	d
Tick	graphics/manager.go	/^func (gm *GraphicsManager) Tick() (ret bool) {$/;"	d
Tick	graphics/text.go	/^func (tgh *TextGraphicsHandler) Tick() bool {$/;"	d
ToJson	math/vec3.go	/^func (vec Vec3) ToJson() []byte {$/;"	d
Top	common/stack.go	/^func (stk *Stack) Top() interface{} {$/;"	d
TransformManager	component/scenemanager/manager.go	/^type TransformManager struct {$/;"	d
UpdateAi	component/ai/manager.go	/^func (am *AiManager) UpdateAi(delta float64) {$/;"	d
UpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) UpdateAiNearPlayer(delta float64) {$/;"	d
UpdateId	component/character/manager.go	/^func (cm *CharacterManager) UpdateId(id component.GOiD, ca *CharacterAttributes) {$/;"	d
Vec2	math/vec2.go	/^type Vec2 [2]float32$/;"	d
Vec3	math/vec3.go	/^type Vec3 [3]float32$/;"	d
Vec4	math/vec4.go	/^type Vec4 [4]float32$/;"	d
Vector	common/vector.go	/^type Vector struct {$/;"	d
WanderAi	component/ai/computer.go	/^func (am *AiManager) WanderAi(id component.GOiD, eventlink chan event.Event) {$/;"	d
WanderDecide	component/ai/computer.go	/^func (am *AiManager) WanderDecide(id component.GOiD) {$/;"	d
arg	component/character/player.go	/^		var arg string$/;"	d
attr	component/ai/computer.go	/^	var attr *character.CharacterAttributes$/;"	d
boundingRadius	graphics/gl.go	/^	\/\/var boundingRadius float32$/;"	d
chat	component/character/delegates.go	/^func chat(r, s component.GOiD, m string) {$/;"	d
cols	math/mat4x4.go	/^\/\/      var cols [4]Vec4$/;"	d
command	component/ai/computer.go	/^	var command string$/;"	d
comp	component/character/manager.go	/^	var comp struct {$/;"	d
creationFunction	component/gofactory/manager.go	/^type creationFunction func(component.GOiD, []byte) error$/;"	d
creationManager	component/gofactory/manager.go	/^type creationManager struct {$/;"	d
decodeVec3String	instance/instance.go	/^func decodeVec3String(vec3 string) math.Vec3 {$/;"	d
err	instance/instance.go	/^	var err error$/;"	d
eventType	event/manager.go	/^\/\/ RegisterListener registers a listening function to be called every time an event of type eventType is processed.$/;"	d
eventType	event/manager.go	/^\/\/ RegisterListeningChannel registers a listening channel to be sent the event every time an event of type eventType is processed.$/;"	d
events	event/manager.go	/^	var events []interface{}$/;"	d
frust	math/frustum.go	/^	var frust Frustum$/;"	d
getNewGOiD	component/gofactory/manager.go	/^func (gof *GameObjectFactory) getNewGOiD() component.GOiD {$/;"	d
graphicsComponent	graphics/manager.go	/^type graphicsComponent struct {$/;"	d
idQueue	component/gofactory/manager.go	/^	var idQueue common.Queue$/;"	d
idToUse	component/gofactory/manager.go	/^	var idToUse component.GOiD$/;"	d
information	component/component.go	/^\/\/ Type used to specify the type information and quantity of an entity on a map.$/;"	d
init	common/log.go	/^func init() {$/;"	d
init	math/frustum.go	/^func (frust *Frustum) init() {$/;"	d
lightingRenderer	graphics/renderer.go	/^type lightingRenderer struct {$/;"	d
logWriter	common/log.go	/^type logWriter struct {$/;"	d
main	betuol.go	/^func main() {$/;"	d
maxDistanceSqrd	res/manager.go	/^	var maxDistanceSqrd float32$/;"	d
modelTransfer	graphics/manager.go	/^type modelTransfer struct {$/;"	d
moveOverTime	component/scenemanager/manager.go	/^type moveOverTime struct {$/;"	d
moveQuestTicker	component/quest/states.go	/^var moveQuestTicker int$/;"	d
normArray	graphics/renderer.go	/^	var normArray [9]float32$/;"	d
normDot	math/plane.go	/^	var normDot float32$/;"	d
normal	math/plane.go	/^	var normal [4]float32$/;"	d
obj	component/ai/manager.go	/^	var obj struct {$/;"	d
obj	component/physics/manager.go	/^	var obj struct {$/;"	d
obj	res/manager.go	/^	var obj []component.MapLocation$/;"	d
obj	res/manager.go	/^	var obj struct {$/;"	d
of	component/ai/manager.go	/^\/\/ Higher level creation functions extract the type of ai computer to be used for the component from a data source and pass the low level information to CreateComponent in order to do the real work of initialization.$/;"	d
of	graphics/model.go	/^\/\/ Model contains data used by GlGraphicsManager to render and display a type of mesh.$/;"	d
queueNode	common/queue.go	/^type queueNode struct {$/;"	d
renderModel	graphics/renderer.go	/^func (rd *renderer) renderModel(mod Model) {$/;"	d
renderer	graphics/renderer.go	/^type renderer struct {$/;"	d
resizeArray	component/ai/manager.go	/^func (am *AiManager) resizeArray(index component.GOiD) {$/;"	d
resizeArray	component/scenemanager/manager.go	/^func (tm *TransformManager) resizeArray(index component.GOiD) {$/;"	d
resizeArrays	component/character/manager.go	/^func (cm *CharacterManager) resizeArrays(index component.GOiD) {$/;"	d
resizeArrays	component/physics/manager.go	/^func (pm *PhysicsManager) resizeArrays(index component.GOiD) {$/;"	d
resizeArrays	graphics/gl.go	/^func (glg *GlGraphicsManager) resizeArrays(id component.GOiD) {$/;"	d
resizeArrays	graphics/text.go	/^func (tgh *TextGraphicsHandler) resizeArrays(id component.GOiD) {$/;"	d
row1	math/vec3.go	/^	var row1, row2, row3 float32$/;"	d
row1	math/vec4.go	/^	var row1, row2, row3, row4 float32$/;"	d
rows	math/mat4x4.go	/^\/\/      var rows [4]Vec4$/;"	d
segs	math/mat4x4.go	/^	var segs [4]Mat2x2 \/\/ four corner 2x2 matrices$/;"	d
stackNode	common/stack.go	/^type stackNode struct {$/;"	d
tmp	common/queue.go	/^	var tmp *queueNode = stk.tail$/;"	d
to	component/ai/manager.go	/^\/\/ RegisterComputer will register an ai computer type to be used for component initialization.$/;"	d
used	component/component.go	/^\/\/ GOiD stands for GameObject ID. It is the type used by all component managers to represent a specific GameObject.$/;"	d
vertsVector	graphics/gl.go	/^	var vertsVector, indiciesVector, normsVector, uvVector *common.Vector$/;"	d
with	component/gofactory/manager.go	/^\/\/ The compType string passed as an argument is used to assosiate a component type with the component manager.$/;"	d
