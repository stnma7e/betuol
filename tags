!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	math/plane.go	/^const ($/;"	c
Add3v3v	math/vec3.go	/^func Add3v3v(vec1, vec2 Vec3) Vec3 {$/;"	d
Add3v3v	math/vec3.go	/^func Add3v3v(vec1, vec2 Vec3) Vec3 {$/;"	f
AddQuest	component/quest/manager.go	/^func (qm *QuestManager) AddQuest(id component.GOiD, state QuestState) {$/;"	d
AddQuest	component/quest/manager.go	/^func (qm *QuestManager) AddQuest(id component.GOiD, state QuestState) {$/;"	f
AddQuest	instance/interface.go	/^func (is *Instance) AddQuest(id component.GOiD, questName string) {$/;"	d
AddQuest	instance/interface.go	/^func (is *Instance) AddQuest(id component.GOiD, questName string) {$/;"	f
AiComputer	component/ai/computer.go	/^type AiComputer func(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event)$/;"	d
AiComputer	component/ai/computer.go	/^type AiComputer func(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event)$/;"	t
AiManager	component/ai/manager.go	/^type AiManager struct {$/;"	d
AiManager	component/ai/manager.go	/^type AiManager struct {$/;"	t
Array	common/queue.go	/^func (stk *Queue) Array() []interface{} {$/;"	d
Array	common/queue.go	/^func (stk *Queue) Array() []interface{} {$/;"	f
Array	common/vector.go	/^func (vc *Vector) Array() []interface{} {$/;"	d
Array	common/vector.go	/^func (vc *Vector) Array() []interface{} {$/;"	f
AttackEvent	event/events.go	/^type AttackEvent struct {$/;"	d
AttackEvent	event/events.go	/^type AttackEvent struct {$/;"	t
AttackQuest	component/quest/states.go	/^func (qm *QuestManager) AttackQuest(id component.GOiD, evt event.Event) {$/;"	d
AttackQuest	component/quest/states.go	/^func (qm *QuestManager) AttackQuest(id component.GOiD, evt event.Event) {$/;"	f
B	math/plane.go	/^	A = iota$/;"	c
BOTTOM	math/frustum.go	/^	RIGHT      byte = iota$/;"	c
C	math/plane.go	/^	B = iota$/;"	c
CharacterAttributes	component/character/character.go	/^type CharacterAttributes struct {$/;"	d
CharacterAttributes	component/character/character.go	/^type CharacterAttributes struct {$/;"	t
CharacterManager	component/character/manager.go	/^type CharacterManager struct {$/;"	d
CharacterManager	component/character/manager.go	/^type CharacterManager struct {$/;"	t
CharacterMoveEvent	event/events.go	/^type CharacterMoveEvent struct {$/;"	d
CharacterMoveEvent	event/events.go	/^type CharacterMoveEvent struct {$/;"	t
ChatEvent	event/events.go	/^type ChatEvent struct {$/;"	d
ChatEvent	event/events.go	/^type ChatEvent struct {$/;"	t
ComponentManager	component/component.go	/^type ComponentManager interface {$/;"	d
ComponentManager	component/component.go	/^type ComponentManager interface {$/;"	t
ContainsPoint	math/frustum.go	/^func (frust *Frustum) ContainsPoint(vec Vec3) bool {$/;"	d
ContainsPoint	math/frustum.go	/^func (frust *Frustum) ContainsPoint(vec Vec3) bool {$/;"	f
ContainsSphere	math/frustum.go	/^func (frust *Frustum) ContainsSphere(sp Sphere) int {$/;"	d
ContainsSphere	math/frustum.go	/^func (frust *Frustum) ContainsSphere(sp Sphere) int {$/;"	f
Create	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Create(compList component.GameObject, location math.Vec3) (component.GOiD, error) {$/;"	d
Create	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Create(compList component.GameObject, location math.Vec3) (component.GOiD, error) {$/;"	f
CreateComponent	component/ai/manager.go	/^func (am *AiManager) CreateComponent(id component.GOiD, computerType string) error {$/;"	d
CreateComponent	component/ai/manager.go	/^func (am *AiManager) CreateComponent(id component.GOiD, computerType string) error {$/;"	f
CreateComponent	component/character/manager.go	/^func (cm *CharacterManager) CreateComponent(index component.GOiD, ca CharacterAttributes) error {$/;"	d
CreateComponent	component/character/manager.go	/^func (cm *CharacterManager) CreateComponent(index component.GOiD, ca CharacterAttributes) error {$/;"	f
CreateComponent	component/graphics/manager.go	/^func (gm *GraphicsManager) CreateComponent(id component.GOiD, gc graphics.GraphicsComponent) error {$/;"	d
CreateComponent	component/graphics/manager.go	/^func (gm *GraphicsManager) CreateComponent(id component.GOiD, gc graphics.GraphicsComponent) error {$/;"	f
CreateComponent	component/physics/manager.go	/^func (pm *PhysicsManager) CreateComponent(id component.GOiD, radius float32) error {$/;"	d
CreateComponent	component/physics/manager.go	/^func (pm *PhysicsManager) CreateComponent(id component.GOiD, radius float32) error {$/;"	f
CreateComponent	component/quest/manager.go	/^func (qm *QuestManager) CreateComponent(id component.GOiD) error {$/;"	d
CreateComponent	component/quest/manager.go	/^func (qm *QuestManager) CreateComponent(id component.GOiD) error {$/;"	f
CreateComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) CreateComponent(index component.GOiD) error {$/;"	d
CreateComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) CreateComponent(index component.GOiD) error {$/;"	f
CreateFromMap	component/gofactory/manager.go	/^func (gof *GameObjectFactory) CreateFromMap(sceneMap *component.Map) ([]component.GOiD, error) {$/;"	d
CreateFromMap	component/gofactory/manager.go	/^func (gof *GameObjectFactory) CreateFromMap(sceneMap *component.Map) ([]component.GOiD, error) {$/;"	f
CreateFromMap	instance/interface.go	/^func (is *Instance) CreateFromMap(mapName string) ([]component.GOiD, error) {$/;"	d
CreateFromMap	instance/interface.go	/^func (is *Instance) CreateFromMap(mapName string) ([]component.GOiD, error) {$/;"	f
CreateObject	instance/interface.go	/^func (is *Instance) CreateObject(objName string, loc math.Vec3) (component.GOiD, error) {$/;"	d
CreateObject	instance/interface.go	/^func (is *Instance) CreateObject(objName string, loc math.Vec3) (component.GOiD, error) {$/;"	f
Cross3v3v	math/vec3.go	/^func Cross3v3v(vec1, vec2 Vec3) (ret Vec3) {$/;"	d
Cross3v3v	math/vec3.go	/^func Cross3v3v(vec1, vec2 Vec3) (ret Vec3) {$/;"	f
D	math/plane.go	/^	C = iota$/;"	c
DeathEvent	event/events.go	/^type DeathEvent struct {$/;"	d
DeathEvent	event/events.go	/^type DeathEvent struct {$/;"	t
Delete	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Delete(index component.GOiD) {$/;"	d
Delete	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Delete(index component.GOiD) {$/;"	f
DeleteComponent	component/ai/manager.go	/^func (am *AiManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/ai/manager.go	/^func (am *AiManager) DeleteComponent(id component.GOiD) {$/;"	f
DeleteComponent	component/character/manager.go	/^func (cm *CharacterManager) DeleteComponent(index component.GOiD) {$/;"	d
DeleteComponent	component/character/manager.go	/^func (cm *CharacterManager) DeleteComponent(index component.GOiD) {$/;"	f
DeleteComponent	component/graphics/manager.go	/^func (gm *GraphicsManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/graphics/manager.go	/^func (gm *GraphicsManager) DeleteComponent(id component.GOiD) {$/;"	f
DeleteComponent	component/physics/manager.go	/^func (pm *PhysicsManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/physics/manager.go	/^func (pm *PhysicsManager) DeleteComponent(id component.GOiD) {$/;"	f
DeleteComponent	component/quest/manager.go	/^func (qm *QuestManager) DeleteComponent(id component.GOiD) {$/;"	d
DeleteComponent	component/quest/manager.go	/^func (qm *QuestManager) DeleteComponent(id component.GOiD) {$/;"	f
DeleteComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) DeleteComponent(index component.GOiD) {$/;"	d
DeleteComponent	component/scenemanager/manager.go	/^func (tm *TransformManager) DeleteComponent(index component.GOiD) {$/;"	f
DeleteModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) DeleteModel(id component.GOiD) {$/;"	d
DeleteModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) DeleteModel(id component.GOiD) {$/;"	f
Dequeue	common/queue.go	/^func (stk *Queue) Dequeue() (interface{}, error) {$/;"	d
Dequeue	common/queue.go	/^func (stk *Queue) Dequeue() (interface{}, error) {$/;"	f
Difference	common/vector.go	/^func (vec1 *Vector) Difference(vec2 *Vector) *Vector {$/;"	d
Difference	common/vector.go	/^func (vec1 *Vector) Difference(vec2 *Vector) *Vector {$/;"	f
Dist3v3v	math/vec3.go	/^func Dist3v3v(vec1, vec2 Vec3) float32 {$/;"	d
Dist3v3v	math/vec3.go	/^func Dist3v3v(vec1, vec2 Vec3) float32 {$/;"	f
DistSqrd3v3v	math/vec3.go	/^func DistSqrd3v3v(vec1, vec2 Vec3) float32 {$/;"	d
DistSqrd3v3v	math/vec3.go	/^func DistSqrd3v3v(vec1, vec2 Vec3) float32 {$/;"	f
Distance	math/plane.go	/^func (pl *Plane) Distance(vec Vec3) float32 {$/;"	d
Distance	math/plane.go	/^func (pl *Plane) Distance(vec Vec3) float32 {$/;"	f
Dot3v3v	math/vec3.go	/^func Dot3v3v(vec1, vec2 Vec3) float32 {$/;"	d
Dot3v3v	math/vec3.go	/^func Dot3v3v(vec1, vec2 Vec3) float32 {$/;"	f
DrawString	graphics/text.go	/^func (tgh *TextGraphicsHandler) DrawString(x, y float32, text string) {$/;"	d
DrawString	graphics/text.go	/^func (tgh *TextGraphicsHandler) DrawString(x, y float32, text string) {$/;"	f
Empty	common/vector.go	/^func (vc *Vector) Empty() {$/;"	d
Empty	common/vector.go	/^func (vc *Vector) Empty() {$/;"	f
EnemyAi	component/ai/computer.go	/^func EnemyAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	d
EnemyAi	component/ai/computer.go	/^func EnemyAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	f
EnemyDecide	component/ai/computer.go	/^func EnemyDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) (eventlist *common.Vector) {$/;"	d
EnemyDecide	component/ai/computer.go	/^func EnemyDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) (eventlist *common.Vector) {$/;"	f
Equal3v3v	math/vec3.go	/^func Equal3v3v(vec1, vec2 Vec3) bool {$/;"	d
Equal3v3v	math/vec3.go	/^func Equal3v3v(vec1, vec2 Vec3) bool {$/;"	f
Equals4m4m	math/mat4x4.go	/^func Equals4m4m(mat, mat2 Mat4x4) bool {$/;"	d
Equals4m4m	math/mat4x4.go	/^func Equals4m4m(mat, mat2 Mat4x4) bool {$/;"	f
Erase	common/vector.go	/^func (vc *Vector) Erase(index int) {$/;"	d
Erase	common/vector.go	/^func (vc *Vector) Erase(index int) {$/;"	f
Event	event/manager.go	/^type Event interface {$/;"	d
Event	event/manager.go	/^type Event interface {$/;"	t
EventListener	event/manager.go	/^type EventListener func(evt Event)$/;"	d
EventListener	event/manager.go	/^type EventListener func(evt Event)$/;"	t
EventManager	event/manager.go	/^type EventManager struct {$/;"	d
EventManager	event/manager.go	/^type EventManager struct {$/;"	t
EventMessage	event/manager.go	/^type EventMessage struct {$/;"	d
EventMessage	event/manager.go	/^type EventMessage struct {$/;"	t
FAR	math/frustum.go	/^	NEAR       byte = iota$/;"	c
FirstMoveQuest	component/quest/states.go	/^func (qm *QuestManager) FirstMoveQuest(id component.GOiD, evt event.Event) {$/;"	d
FirstMoveQuest	component/quest/states.go	/^func (qm *QuestManager) FirstMoveQuest(id component.GOiD, evt event.Event) {$/;"	f
Frustum	math/frustum.go	/^type Frustum struct {$/;"	d
Frustum	math/frustum.go	/^type Frustum struct {$/;"	t
GOiD	component/component.go	/^type GOiD uint32$/;"	d
GOiD	component/component.go	/^type GOiD uint32$/;"	t
GameObject	component/component.go	/^type GameObject map[string][]byte$/;"	d
GameObject	component/component.go	/^type GameObject map[string][]byte$/;"	t
GameObjectFactory	component/gofactory/manager.go	/^type GameObjectFactory struct {$/;"	d
GameObjectFactory	component/gofactory/manager.go	/^type GameObjectFactory struct {$/;"	t
GetCharacterAttributes	component/character/manager.go	/^func (cm *CharacterManager) GetCharacterAttributes(index component.GOiD) *CharacterAttributes {$/;"	d
GetCharacterAttributes	component/character/manager.go	/^func (cm *CharacterManager) GetCharacterAttributes(index component.GOiD) *CharacterAttributes {$/;"	f
GetEventManager	instance/interface.go	/^func (is *Instance) GetEventManager() *event.EventManager {$/;"	d
GetEventManager	instance/interface.go	/^func (is *Instance) GetEventManager() *event.EventManager {$/;"	f
GetEventType	event/events.go	/^func (at AttackEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (at AttackEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (ce ChatEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ce ChatEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (ce PlayerCreatedEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ce PlayerCreatedEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (cme CharacterMoveEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (cme CharacterMoveEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (dt DeathEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (dt DeathEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (ke KillEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (ke KillEvent) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (qt QuestComplete) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (qt QuestComplete) GetEventType() string {$/;"	f
GetEventType	event/events.go	/^func (rae RunAiEvent) GetEventType() string {$/;"	d
GetEventType	event/events.go	/^func (rae RunAiEvent) GetEventType() string {$/;"	f
GetFileContents	res/manager.go	/^func (rm *ResourceManager) GetFileContents(fileName string) ([]byte, error) {$/;"	d
GetFileContents	res/manager.go	/^func (rm *ResourceManager) GetFileContents(fileName string) ([]byte, error) {$/;"	f
GetFileContents	res/manager.go	/^func GetFileContents(fileName string) ([]byte, error) {$/;"	d
GetFileContents	res/manager.go	/^func GetFileContents(fileName string) ([]byte, error) {$/;"	f
GetMatrixList	component/scenemanager/manager.go	/^func (tm *TransformManager) GetMatrixList() []math.Mat4x4 {$/;"	d
GetMatrixList	component/scenemanager/manager.go	/^func (tm *TransformManager) GetMatrixList() []math.Mat4x4 {$/;"	f
GetObjectLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectLocation(index component.GOiD) (math.Vec3, error) {$/;"	d
GetObjectLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectLocation(index component.GOiD) (math.Vec3, error) {$/;"	f
GetObjectsInLocationRadius	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectsInLocationRadius(loc math.Vec3, lookRange float32) *common.Queue {$/;"	d
GetObjectsInLocationRadius	component/scenemanager/manager.go	/^func (tm *TransformManager) GetObjectsInLocationRadius(loc math.Vec3, lookRange float32) *common.Queue {$/;"	f
GetSceneManagerSnapshot	instance/interface.go	/^func (is *Instance) GetSceneManagerSnapshot() component.SceneManager {$/;"	d
GetSceneManagerSnapshot	instance/interface.go	/^func (is *Instance) GetSceneManagerSnapshot() component.SceneManager {$/;"	f
GetSize	graphics/text.go	/^func (tgh *TextGraphicsHandler) GetSize() (int, int) {$/;"	d
GetSize	graphics/text.go	/^func (tgh *TextGraphicsHandler) GetSize() (int, int) {$/;"	f
GetTransform4m	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransform4m(index component.GOiD) (math.Mat4x4, error) {$/;"	d
GetTransform4m	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransform4m(index component.GOiD) (math.Mat4x4, error) {$/;"	f
GetTransformMatrix	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransformMatrix(index component.GOiD) (math.Mat4x4, error) {$/;"	d
GetTransformMatrix	component/scenemanager/manager.go	/^func (tm *TransformManager) GetTransformMatrix(index component.GOiD) (math.Mat4x4, error) {$/;"	f
GraphicsComponent	graphics/graphics.go	/^type GraphicsComponent struct {$/;"	d
GraphicsComponent	graphics/graphics.go	/^type GraphicsComponent struct {$/;"	t
GraphicsHandler	graphics/graphics.go	/^type GraphicsHandler interface {$/;"	d
GraphicsHandler	graphics/graphics.go	/^type GraphicsHandler interface {$/;"	t
GraphicsHandlerFunc	component/graphics/handlers.go	/^type GraphicsHandlerFunc func(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool)$/;"	d
GraphicsHandlerFunc	component/graphics/handlers.go	/^type GraphicsHandlerFunc func(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool)$/;"	t
GraphicsManager	component/graphics/manager.go	/^type GraphicsManager struct {$/;"	d
GraphicsManager	component/graphics/manager.go	/^type GraphicsManager struct {$/;"	t
Greet	component/character/character.go	/^func (ca *CharacterAttributes) Greet() string {$/;"	d
Greet	component/character/character.go	/^func (ca *CharacterAttributes) Greet() string {$/;"	f
HEALTH	component/character/character.go	/^const ($/;"	c
HandleAttack	component/character/delegates.go	/^func (cm *CharacterManager) HandleAttack(evt event.Event) {$/;"	d
HandleAttack	component/character/delegates.go	/^func (cm *CharacterManager) HandleAttack(evt event.Event) {$/;"	f
HandleChat	component/character/delegates.go	/^func (cm *CharacterManager) HandleChat(evt event.Event) {$/;"	d
HandleChat	component/character/delegates.go	/^func (cm *CharacterManager) HandleChat(evt event.Event) {$/;"	f
HandleDeath	component/gofactory/manager.go	/^func (gof *GameObjectFactory) HandleDeath(evt event.Event) {$/;"	d
HandleDeath	component/gofactory/manager.go	/^func (gof *GameObjectFactory) HandleDeath(evt event.Event) {$/;"	f
HandleEvent	component/quest/manager.go	/^func (qm *QuestManager) HandleEvent(evt event.Event) {$/;"	d
HandleEvent	component/quest/manager.go	/^func (qm *QuestManager) HandleEvent(evt event.Event) {$/;"	f
HandleInputs	graphics/text.go	/^func (tgh *TextGraphicsHandler) HandleInputs() Inputs {$/;"	d
HandleInputs	graphics/text.go	/^func (tgh *TextGraphicsHandler) HandleInputs() Inputs {$/;"	f
IInstance	instance/interface.go	/^type IInstance interface {$/;"	d
IInstance	instance/interface.go	/^type IInstance interface {$/;"	t
INSIDE	math/frustum.go	/^	OUTSIDE   int = iota$/;"	c
INTELLIGENCE	component/character/character.go	/^	STRENGTH     = iota$/;"	c
INTERSECT	math/frustum.go	/^	INSIDE    int = iota$/;"	c
Inputs	graphics/graphics.go	/^type Inputs struct {$/;"	d
Inputs	graphics/graphics.go	/^type Inputs struct {$/;"	t
Insert	common/vector.go	/^func (vc *Vector) Insert(data interface{}) int {$/;"	d
Insert	common/vector.go	/^func (vc *Vector) Insert(data interface{}) int {$/;"	f
InsertInto	common/vector.go	/^func (vc *Vector) InsertInto(index int, data interface{}) {$/;"	d
InsertInto	common/vector.go	/^func (vc *Vector) InsertInto(index int, data interface{}) {$/;"	f
Instance	instance/instance.go	/^type Instance struct {$/;"	d
Instance	instance/instance.go	/^type Instance struct {$/;"	t
Intersects	math/sphere.go	/^func (sp *Sphere) Intersects(sp2 Sphere) bool {$/;"	d
Intersects	math/sphere.go	/^func (sp *Sphere) Intersects(sp2 Sphere) bool {$/;"	f
Inverse	math/mat4x4.go	/^\/\/func (mat Mat4x4) Inverse() Mat4x4 {$/;"	d
Inverse	math/mat4x4.go	/^func (mat Mat4x4) Inverse() Mat4x4 {$/;"	d
Inverse	math/mat4x4.go	/^func (mat Mat4x4) Inverse() Mat4x4 {$/;"	f
Invert	math/mat2x2.go	/^func (mat *Mat2x2) Invert() {$/;"	d
Invert	math/mat2x2.go	/^func (mat *Mat2x2) Invert() {$/;"	f
IsEmpty	common/queue.go	/^func (stk *Queue) IsEmpty() bool {$/;"	d
IsEmpty	common/queue.go	/^func (stk *Queue) IsEmpty() bool {$/;"	f
IsEmpty	common/stack.go	/^func (stk *Stack) IsEmpty() bool {$/;"	d
IsEmpty	common/stack.go	/^func (stk *Stack) IsEmpty() bool {$/;"	f
IsEmpty	common/vector.go	/^func (vc *Vector) IsEmpty() bool {$/;"	d
IsEmpty	common/vector.go	/^func (vc *Vector) IsEmpty() bool {$/;"	f
IsEmpty	math/mat4x4.go	/^func (m *Mat4x4) IsEmpty() bool {$/;"	d
IsEmpty	math/mat4x4.go	/^func (m *Mat4x4) IsEmpty() bool {$/;"	f
IsInside	math/plane.go	/^func (pl *Plane) IsInside(vec Vec3) bool {$/;"	d
IsInside	math/plane.go	/^func (pl *Plane) IsInside(vec Vec3) bool {$/;"	f
IsOnPlane	math/plane.go	/^func (pl *Plane) IsOnPlane(vec Vec3) bool {$/;"	d
IsOnPlane	math/plane.go	/^func (pl *Plane) IsOnPlane(vec Vec3) bool {$/;"	f
JsonCreate	component/ai/manager.go	/^func (am *AiManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/ai/manager.go	/^func (am *AiManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	f
JsonCreate	component/character/manager.go	/^func (cm *CharacterManager) JsonCreate(index component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/character/manager.go	/^func (cm *CharacterManager) JsonCreate(index component.GOiD, data []byte) error {$/;"	f
JsonCreate	component/graphics/manager.go	/^func (gm *GraphicsManager) JsonCreate(id component.GOiD, compData []byte) error {$/;"	d
JsonCreate	component/graphics/manager.go	/^func (gm *GraphicsManager) JsonCreate(id component.GOiD, compData []byte) error {$/;"	f
JsonCreate	component/physics/manager.go	/^func (pm *PhysicsManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/physics/manager.go	/^func (pm *PhysicsManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	f
JsonCreate	component/quest/manager.go	/^func (qm *QuestManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	d
JsonCreate	component/quest/manager.go	/^func (qm *QuestManager) JsonCreate(id component.GOiD, data []byte) error {$/;"	f
KillEvent	event/events.go	/^type KillEvent struct {$/;"	d
KillEvent	event/events.go	/^type KillEvent struct {$/;"	t
KillQuest	component/quest/states.go	/^func (qm *QuestManager) KillQuest(id component.GOiD, evt event.Event) {$/;"	d
KillQuest	component/quest/states.go	/^func (qm *QuestManager) KillQuest(id component.GOiD, evt event.Event) {$/;"	f
LEFT	math/frustum.go	/^	BOTTOM     byte = iota$/;"	c
LoadGameObject	res/manager.go	/^func (rm *ResourceManager) LoadGameObject(objType string) (component.GameObject, error) {$/;"	d
LoadGameObject	res/manager.go	/^func (rm *ResourceManager) LoadGameObject(objType string) (component.GameObject, error) {$/;"	f
LoadJsonMap	res/manager.go	/^func (rm *ResourceManager) LoadJsonMap(mapName string) (component.Map, error) {$/;"	d
LoadJsonMap	res/manager.go	/^func (rm *ResourceManager) LoadJsonMap(mapName string) (component.Map, error) {$/;"	f
LoadModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) LoadModel(id component.GOiD, gc GraphicsComponent) error {$/;"	d
LoadModel	graphics/text.go	/^func (tgh *TextGraphicsHandler) LoadModel(id component.GOiD, gc GraphicsComponent) error {$/;"	f
LoadModelWavefront	res/manager.go	/^func (rm *ResourceManager) LoadModelWavefront(modelName string) (WavefrontData, error) {$/;"	d
LoadModelWavefront	res/manager.go	/^func (rm *ResourceManager) LoadModelWavefront(modelName string) (WavefrontData, error) {$/;"	f
LogErr	common/log.go	/^var LogErr, LogWarn, LogInfo *log.Logger$/;"	d
LogErr	common/log.go	/^var LogErr, LogWarn, LogInfo *log.Logger$/;"	v
LogInfo	common/log.go	/^var LogErr, LogWarn, LogInfo *log.Logger$/;"	v
LogWarn	common/log.go	/^var LogErr, LogWarn, LogInfo *log.Logger$/;"	v
LookAt	math/frustum.go	/^func (frust *Frustum) LookAt(target, eye, up Vec3) {$/;"	d
LookAt	math/frustum.go	/^func (frust *Frustum) LookAt(target, eye, up Vec3) {$/;"	f
LookAtMatrix	math/frustum.go	/^func (frust *Frustum) LookAtMatrix() Mat4x4 {$/;"	d
LookAtMatrix	math/frustum.go	/^func (frust *Frustum) LookAtMatrix() Mat4x4 {$/;"	f
MANA	component/character/character.go	/^	HEALTH       = iota$/;"	c
Mag3v	math/vec3.go	/^func Mag3v(vec Vec3) float32 {$/;"	d
Mag3v	math/vec3.go	/^func Mag3v(vec Vec3) float32 {$/;"	f
Mag4v	math/vec4.go	/^func Mag4v(vec Vec4) float32 {$/;"	d
Mag4v	math/vec4.go	/^func Mag4v(vec Vec4) float32 {$/;"	f
MagSqrd3v	math/vec3.go	/^func MagSqrd3v(vec Vec3) float32 {$/;"	d
MagSqrd3v	math/vec3.go	/^func MagSqrd3v(vec Vec3) float32 {$/;"	f
MagSqrd4v	math/vec4.go	/^func MagSqrd4v(vec Vec4) float32 {$/;"	d
MagSqrd4v	math/vec4.go	/^func MagSqrd4v(vec Vec4) float32 {$/;"	f
MakeAiManager	component/ai/manager.go	/^func MakeAiManager(tm *scenemanager.TransformManager, cm *character.CharacterManager, em *event.EventManager) *AiManager {$/;"	d
MakeAiManager	component/ai/manager.go	/^func MakeAiManager(tm *scenemanager.TransformManager, cm *character.CharacterManager, em *event.EventManager) *AiManager {$/;"	f
MakeCharacterManager	component/character/manager.go	/^func MakeCharacterManager(tm *scenemanager.TransformManager, em *event.EventManager) *CharacterManager {$/;"	d
MakeCharacterManager	component/character/manager.go	/^func MakeCharacterManager(tm *scenemanager.TransformManager, em *event.EventManager) *CharacterManager {$/;"	f
MakeEventManager	event/manager.go	/^func MakeEventManager() *EventManager {$/;"	d
MakeEventManager	event/manager.go	/^func MakeEventManager() *EventManager {$/;"	f
MakeFrustum	math/frustum.go	/^func MakeFrustum(nearDist, farDist, fov, aspect float32) *Frustum {$/;"	d
MakeFrustum	math/frustum.go	/^func MakeFrustum(nearDist, farDist, fov, aspect float32) *Frustum {$/;"	f
MakeGameObjectFactory	component/gofactory/manager.go	/^func MakeGameObjectFactory(tm *scenemanager.TransformManager) *GameObjectFactory {$/;"	d
MakeGameObjectFactory	component/gofactory/manager.go	/^func MakeGameObjectFactory(tm *scenemanager.TransformManager) *GameObjectFactory {$/;"	f
MakeGraphicsManager	component/graphics/manager.go	/^func MakeGraphicsManager(em *event.EventManager, rm *res.ResourceManager, sm component.SceneManager) *GraphicsManager {$/;"	d
MakeGraphicsManager	component/graphics/manager.go	/^func MakeGraphicsManager(em *event.EventManager, rm *res.ResourceManager, sm component.SceneManager) *GraphicsManager {$/;"	f
MakeIdentity	math/mat4x4.go	/^func (m *Mat4x4) MakeIdentity() {$/;"	d
MakeIdentity	math/mat4x4.go	/^func (m *Mat4x4) MakeIdentity() {$/;"	f
MakeInstance	instance/instance.go	/^func MakeInstance(rm *res.ResourceManager) *Instance {$/;"	d
MakeInstance	instance/instance.go	/^func MakeInstance(rm *res.ResourceManager) *Instance {$/;"	f
MakePerspectiveMatrix	math/mat4x4.go	/^func MakePerspectiveMatrix(near, far, fov, aspect float32) (mat Mat4x4) {$/;"	d
MakePerspectiveMatrix	math/mat4x4.go	/^func MakePerspectiveMatrix(near, far, fov, aspect float32) (mat Mat4x4) {$/;"	f
MakePhysicsManager	component/physics/manager.go	/^func MakePhysicsManager(sm component.SceneManager) *PhysicsManager {$/;"	d
MakePhysicsManager	component/physics/manager.go	/^func MakePhysicsManager(sm component.SceneManager) *PhysicsManager {$/;"	f
MakePlane	math/plane.go	/^func MakePlane(p1, p2, p3 Vec3) Plane {$/;"	d
MakePlane	math/plane.go	/^func MakePlane(p1, p2, p3 Vec3) Plane {$/;"	f
MakeQuestManager	component/quest/manager.go	/^func MakeQuestManager(em *event.EventManager) *QuestManager {$/;"	d
MakeQuestManager	component/quest/manager.go	/^func MakeQuestManager(em *event.EventManager) *QuestManager {$/;"	f
MakeResourceManager	res/manager.go	/^func MakeResourceManager(fileDepot string) *ResourceManager {$/;"	d
MakeResourceManager	res/manager.go	/^func MakeResourceManager(fileDepot string) *ResourceManager {$/;"	f
MakeTextGraphicsHandler	graphics/text.go	/^func MakeTextGraphicsHandler() *TextGraphicsHandler {$/;"	d
MakeTextGraphicsHandler	graphics/text.go	/^func MakeTextGraphicsHandler() *TextGraphicsHandler {$/;"	f
MakeTransformManager	component/scenemanager/manager.go	/^func MakeTransformManager(em *event.EventManager) *TransformManager {$/;"	d
MakeTransformManager	component/scenemanager/manager.go	/^func MakeTransformManager(em *event.EventManager) *TransformManager {$/;"	f
MakeVector	common/vector.go	/^func MakeVector() *Vector {$/;"	d
MakeVector	common/vector.go	/^func MakeVector() *Vector {$/;"	f
Map	component/component.go	/^type Map []MapLocation$/;"	d
Map	component/component.go	/^type Map []MapLocation$/;"	t
MapEntity	component/component.go	/^type MapEntity struct {$/;"	d
MapEntity	component/component.go	/^type MapEntity struct {$/;"	t
MapLocation	component/component.go	/^type MapLocation struct {$/;"	d
MapLocation	component/component.go	/^type MapLocation struct {$/;"	t
Mat2x2	math/mat2x2.go	/^type Mat2x2 [4]float32$/;"	d
Mat2x2	math/mat2x2.go	/^type Mat2x2 [4]float32$/;"	t
Mat4x4	math/mat4x4.go	/^type Mat4x4 [16]float32$/;"	d
Mat4x4	math/mat4x4.go	/^type Mat4x4 [16]float32$/;"	t
ModelTransfer	graphics/graphics.go	/^type ModelTransfer struct {$/;"	d
ModelTransfer	graphics/graphics.go	/^type ModelTransfer struct {$/;"	t
MoveGameObject	instance/interface.go	/^func (is *Instance) MoveGameObject(id component.GOiD, newLoc math.Vec3) {$/;"	d
MoveGameObject	instance/interface.go	/^func (is *Instance) MoveGameObject(id component.GOiD, newLoc math.Vec3) {$/;"	f
Mult	math/mat2x2.go	/^func (mat *Mat2x2) Mult(scalar float32) {$/;"	d
Mult	math/mat2x2.go	/^func (mat *Mat2x2) Mult(scalar float32) {$/;"	f
Mult3vf	math/vec3.go	/^func Mult3vf(vec Vec3, scalar float32) Vec3 {$/;"	d
Mult3vf	math/vec3.go	/^func Mult3vf(vec Vec3, scalar float32) Vec3 {$/;"	f
Mult4m3v	math/vec3.go	/^func Mult4m3v(mat Mat4x4, vec Vec3) Vec3 {$/;"	d
Mult4m3v	math/vec3.go	/^func Mult4m3v(mat Mat4x4, vec Vec3) Vec3 {$/;"	f
Mult4m4m	math/mat4x4.go	/^func Mult4m4m(mat1, mat2 Mat4x4) Mat4x4 {$/;"	d
Mult4m4m	math/mat4x4.go	/^func Mult4m4m(mat1, mat2 Mat4x4) Mat4x4 {$/;"	f
Mult4m4mj	math/mat4x4.go	/^\/\/ func Mult4m4mj(mat1, mat2 Mat4x4) (ret Mat4x4) {$/;"	d
Mult4m4v	math/vec4.go	/^func Mult4m4v(mat Mat4x4, vec Vec4) Vec4 {$/;"	d
Mult4m4v	math/vec4.go	/^func Mult4m4v(mat Mat4x4, vec Vec4) Vec4 {$/;"	f
Mult4v4v	math/vec4.go	/^func Mult4v4v(vec1, vec2 Vec4) (ret Vec4) {$/;"	d
Mult4v4v	math/vec4.go	/^func Mult4v4v(vec1, vec2 Vec4) (ret Vec4) {$/;"	f
NEAR	math/frustum.go	/^const ($/;"	c
NULLINDEX	component/component.go	/^const NULLINDEX = 0$/;"	c
NUM_ATTRIBUTES	component/character/character.go	/^	RANGEOFSIGHT = iota$/;"	c
Normalize	math/plane.go	/^func (pl *Plane) Normalize() {$/;"	d
Normalize	math/plane.go	/^func (pl *Plane) Normalize() {$/;"	f
Normalize3v	math/vec3.go	/^func Normalize3v(vec Vec3) Vec3 {$/;"	d
Normalize3v	math/vec3.go	/^func Normalize3v(vec Vec3) Vec3 {$/;"	f
OUTSIDE	math/frustum.go	/^const ($/;"	c
ParsePlayerCommand	component/character/player.go	/^func ParsePlayerCommand(command string, id component.GOiD, chars *CharacterManager) {$/;"	d
ParsePlayerCommand	component/character/player.go	/^func ParsePlayerCommand(command string, id component.GOiD, chars *CharacterManager) {$/;"	f
Peek	common/queue.go	/^func (stk *Queue) Peek() interface{} {$/;"	d
Peek	common/queue.go	/^func (stk *Queue) Peek() interface{} {$/;"	f
PhysicsManager	component/physics/manager.go	/^type PhysicsManager struct {$/;"	d
PhysicsManager	component/physics/manager.go	/^type PhysicsManager struct {$/;"	t
Plane	math/plane.go	/^type Plane Vec4$/;"	d
Plane	math/plane.go	/^type Plane Vec4$/;"	t
PlayerAi	component/ai/computer.go	/^func PlayerAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	d
PlayerAi	component/ai/computer.go	/^func PlayerAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	f
PlayerAttack	component/character/player.go	/^func PlayerAttack(player, enemy component.GOiD, chars *CharacterManager) {$/;"	d
PlayerAttack	component/character/player.go	/^func PlayerAttack(player, enemy component.GOiD, chars *CharacterManager) {$/;"	f
PlayerCreatedEvent	event/events.go	/^type PlayerCreatedEvent struct {$/;"	d
PlayerCreatedEvent	event/events.go	/^type PlayerCreatedEvent struct {$/;"	t
PlayerDecide	component/ai/computer.go	/^func PlayerDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) {$/;"	d
PlayerDecide	component/ai/computer.go	/^func PlayerDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) {$/;"	f
PlayerLook	component/character/player.go	/^func PlayerLook(id component.GOiD, chars *CharacterManager) {$/;"	d
PlayerLook	component/character/player.go	/^func PlayerLook(id component.GOiD, chars *CharacterManager) {$/;"	f
PlayerMove	component/character/player.go	/^func PlayerMove(direction string, id component.GOiD, chars *CharacterManager) {$/;"	d
PlayerMove	component/character/player.go	/^func PlayerMove(direction string, id component.GOiD, chars *CharacterManager) {$/;"	f
Pop	common/stack.go	/^func (stk *Stack) Pop() interface{} {$/;"	d
Pop	common/stack.go	/^func (stk *Stack) Pop() interface{} {$/;"	f
Projection	math/frustum.go	/^func (frust *Frustum) Projection() Mat4x4 {$/;"	d
Projection	math/frustum.go	/^func (frust *Frustum) Projection() Mat4x4 {$/;"	f
Push	common/stack.go	/^func (stk *Stack) Push(val interface{}) {$/;"	d
Push	common/stack.go	/^func (stk *Stack) Push(val interface{}) {$/;"	f
Push_back	common/vector.go	/^func (vc *Vector) Push_back(data interface{}, resizeStep, checkDistance int) {$/;"	d
Push_back	common/vector.go	/^func (vc *Vector) Push_back(data interface{}, resizeStep, checkDistance int) {$/;"	f
QuestComplete	component/quest/manager.go	/^func (qm *QuestManager) QuestComplete(evt event.Event) {$/;"	d
QuestComplete	component/quest/manager.go	/^func (qm *QuestManager) QuestComplete(evt event.Event) {$/;"	f
QuestComplete	event/events.go	/^type QuestComplete struct {$/;"	d
QuestComplete	event/events.go	/^type QuestComplete struct {$/;"	t
QuestManager	component/quest/manager.go	/^type QuestManager struct {$/;"	d
QuestManager	component/quest/manager.go	/^type QuestManager struct {$/;"	t
QuestNames	instance/interface.go	/^	var QuestNames = map[string]quest.QuestState{$/;"	d
QuestState	component/quest/states.go	/^type QuestState func(id component.GOiD, evt event.Event)$/;"	d
QuestState	component/quest/states.go	/^type QuestState func(id component.GOiD, evt event.Event)$/;"	t
Queue	common/queue.go	/^func (stk *Queue) Queue(a interface{}) {$/;"	d
Queue	common/queue.go	/^func (stk *Queue) Queue(a interface{}) {$/;"	f
Queue	common/queue.go	/^type Queue struct {$/;"	d
Queue	common/queue.go	/^type Queue struct {$/;"	t
RANGEOFSIGHT	component/character/character.go	/^	INTELLIGENCE = iota$/;"	c
RESIZESTEP	component/character/character.go	/^	NUM_ATTRIBUTES = iota$/;"	c
RIGHT	math/frustum.go	/^	TOP        byte = iota$/;"	c
Register	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Register(compType string, mang component.ComponentManager, creationFunc creationFunction) error {$/;"	d
Register	component/gofactory/manager.go	/^func (gof *GameObjectFactory) Register(compType string, mang component.ComponentManager, creationFunc creationFunction) error {$/;"	f
RegisterComputer	component/ai/manager.go	/^func (am *AiManager) RegisterComputer(aiType string, computer AiComputer) {$/;"	d
RegisterComputer	component/ai/manager.go	/^func (am *AiManager) RegisterComputer(aiType string, computer AiComputer) {$/;"	f
RegisterGraphicsHandler	component/graphics/manager.go	/^func (gm *GraphicsManager) RegisterGraphicsHandler(handler GraphicsHandlerFunc) {$/;"	d
RegisterGraphicsHandler	component/graphics/manager.go	/^func (gm *GraphicsManager) RegisterGraphicsHandler(handler GraphicsHandlerFunc) {$/;"	f
RegisterListener	event/manager.go	/^func (em *EventManager) RegisterListener(eventType string, listener EventListener) {$/;"	d
RegisterListener	event/manager.go	/^func (em *EventManager) RegisterListener(eventType string, listener EventListener) {$/;"	f
RegisterListeningChannel	event/manager.go	/^func (em *EventManager) RegisterListeningChannel(eventType string, eventlink chan Event) {$/;"	d
RegisterListeningChannel	event/manager.go	/^func (em *EventManager) RegisterListeningChannel(eventType string, eventlink chan Event) {$/;"	f
Render	graphics/text.go	/^func (tgh *TextGraphicsHandler) Render(ids *common.Vector, sm component.SceneManager, cam *math.Frustum) {$/;"	d
Render	graphics/text.go	/^func (tgh *TextGraphicsHandler) Render(ids *common.Vector, sm component.SceneManager, cam *math.Frustum) {$/;"	f
ResourceManager	res/manager.go	/^type ResourceManager struct {$/;"	d
ResourceManager	res/manager.go	/^type ResourceManager struct {$/;"	t
RunAi	component/ai/manager.go	/^func (am *AiManager) RunAi(id component.GOiD) {$/;"	d
RunAi	component/ai/manager.go	/^func (am *AiManager) RunAi(id component.GOiD) {$/;"	f
RunAi	instance/interface.go	/^func (is *Instance) RunAi(id component.GOiD) {$/;"	d
RunAi	instance/interface.go	/^func (is *Instance) RunAi(id component.GOiD) {$/;"	f
RunAiEvent	event/events.go	/^type RunAiEvent struct {$/;"	d
RunAiEvent	event/events.go	/^type RunAiEvent struct {$/;"	t
RunGraphicsHandlerFunc	component/graphics/handlers.go	/^func (gm *GraphicsManager) RunGraphicsHandlerFunc(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool, ghf GraphicsHandlerFunc) {$/;"	d
RunGraphicsHandlerFunc	component/graphics/handlers.go	/^func (gm *GraphicsManager) RunGraphicsHandlerFunc(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool, ghf GraphicsHandlerFunc) {$/;"	f
SIDE_TOTAL	math/frustum.go	/^	LEFT       byte = iota$/;"	c
STRENGTH	component/character/character.go	/^	MANA         = iota$/;"	c
SceneManager	component/component.go	/^type SceneManager interface {$/;"	d
SceneManager	component/component.go	/^type SceneManager interface {$/;"	t
SceneType	component/gofactory/manager.go	/^const SceneType = "scene"$/;"	c
Send	event/manager.go	/^func (em *EventManager) Send(evt Event) {$/;"	d
Send	event/manager.go	/^func (em *EventManager) Send(evt Event) {$/;"	f
SetLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocation(index component.GOiD, newLocation math.Vec3) {$/;"	d
SetLocation	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocation(index component.GOiD, newLocation math.Vec3) {$/;"	f
SetLocationOverTime	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocationOverTime(id component.GOiD, newLocation math.Vec3, timeToMove float64) error {$/;"	d
SetLocationOverTime	component/scenemanager/manager.go	/^func (tm *TransformManager) SetLocationOverTime(id component.GOiD, newLocation math.Vec3, timeToMove float64) error {$/;"	f
SetTransform	component/scenemanager/manager.go	/^func (tm *TransformManager) SetTransform(index component.GOiD, newLocalMat math.Mat4x4) {$/;"	d
SetTransform	component/scenemanager/manager.go	/^func (tm *TransformManager) SetTransform(index component.GOiD, newLocalMat math.Mat4x4) {$/;"	f
SetUpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) SetUpdateAiNearPlayer(yes bool) {$/;"	d
SetUpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) SetUpdateAiNearPlayer(yes bool) {$/;"	f
Sort	event/manager.go	/^func (em *EventManager) Sort() {$/;"	d
Sort	event/manager.go	/^func (em *EventManager) Sort() {$/;"	f
Sphere	math/sphere.go	/^type Sphere struct {$/;"	d
Sphere	math/sphere.go	/^type Sphere struct {$/;"	t
Split	math/mat2x2.go	/^func (segs *Mat2x2) Split() (a, b, c, d float32) {$/;"	d
Split	math/mat2x2.go	/^func (segs *Mat2x2) Split() (a, b, c, d float32) {$/;"	f
Stack	common/stack.go	/^type Stack struct {$/;"	d
Stack	common/stack.go	/^type Stack struct {$/;"	t
StartScript	instance/script.go	/^func StartScript(is IInstance, charsToActOn ...component.GOiD) error {$/;"	d
StartScript	instance/script.go	/^func StartScript(is IInstance, charsToActOn ...component.GOiD) error {$/;"	f
Sub3v3v	math/vec3.go	/^func Sub3v3v(vec1, vec2 Vec3) Vec3 {$/;"	d
Sub3v3v	math/vec3.go	/^func Sub3v3v(vec1, vec2 Vec3) Vec3 {$/;"	f
TOP	math/frustum.go	/^	FAR        byte = iota$/;"	c
TextGraphicsHandler	graphics/text.go	/^type TextGraphicsHandler struct {$/;"	d
TextGraphicsHandler	graphics/text.go	/^type TextGraphicsHandler struct {$/;"	t
TextHandlerFunc	component/graphics/handlers.go	/^func (gm *GraphicsManager) TextHandlerFunc(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool) {$/;"	d
TextHandlerFunc	component/graphics/handlers.go	/^func (gm *GraphicsManager) TextHandlerFunc(compslink chan *common.Vector, modellink chan graphics.ModelTransfer, deletelink chan component.GOiD, resizelink chan bool) {$/;"	f
Tick	component/ai/manager.go	/^func (am *AiManager) Tick(delta float64) {$/;"	d
Tick	component/ai/manager.go	/^func (am *AiManager) Tick(delta float64) {$/;"	f
Tick	component/character/manager.go	/^func (cm *CharacterManager) Tick(delta float64) {$/;"	d
Tick	component/character/manager.go	/^func (cm *CharacterManager) Tick(delta float64) {$/;"	f
Tick	component/graphics/manager.go	/^func (gm *GraphicsManager) Tick(delta float64, sm component.SceneManager) {$/;"	d
Tick	component/graphics/manager.go	/^func (gm *GraphicsManager) Tick(delta float64, sm component.SceneManager) {$/;"	f
Tick	component/physics/manager.go	/^func (pm *PhysicsManager) Tick(delta float64) {$/;"	d
Tick	component/physics/manager.go	/^func (pm *PhysicsManager) Tick(delta float64) {$/;"	f
Tick	component/quest/manager.go	/^func (qm *QuestManager) Tick(delta float64) {$/;"	d
Tick	component/quest/manager.go	/^func (qm *QuestManager) Tick(delta float64) {$/;"	f
Tick	component/scenemanager/manager.go	/^func (tm *TransformManager) Tick(delta float64) {$/;"	d
Tick	component/scenemanager/manager.go	/^func (tm *TransformManager) Tick(delta float64) {$/;"	f
Tick	event/manager.go	/^func (em *EventManager) Tick(delta float64) {$/;"	d
Tick	event/manager.go	/^func (em *EventManager) Tick(delta float64) {$/;"	f
Tick	graphics/text.go	/^func (tgh *TextGraphicsHandler) Tick() bool {$/;"	d
Tick	graphics/text.go	/^func (tgh *TextGraphicsHandler) Tick() bool {$/;"	f
Tick	instance/instance.go	/^func (is *Instance) Tick(secs float64) {$/;"	d
Tick	instance/instance.go	/^func (is *Instance) Tick(secs float64) {$/;"	f
ToJson	math/vec3.go	/^func (vec Vec3) ToJson() []byte {$/;"	d
ToJson	math/vec3.go	/^func (vec Vec3) ToJson() []byte {$/;"	f
Top	common/stack.go	/^func (stk *Stack) Top() interface{} {$/;"	d
Top	common/stack.go	/^func (stk *Stack) Top() interface{} {$/;"	f
TransformManager	component/scenemanager/manager.go	/^type TransformManager struct {$/;"	d
TransformManager	component/scenemanager/manager.go	/^type TransformManager struct {$/;"	t
UpdateAi	component/ai/manager.go	/^func (am *AiManager) UpdateAi(delta float64) {$/;"	d
UpdateAi	component/ai/manager.go	/^func (am *AiManager) UpdateAi(delta float64) {$/;"	f
UpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) UpdateAiNearPlayer(delta float64) {$/;"	d
UpdateAiNearPlayer	component/ai/manager.go	/^func (am *AiManager) UpdateAiNearPlayer(delta float64) {$/;"	f
UpdateId	component/character/manager.go	/^func (cm *CharacterManager) UpdateId(id component.GOiD, ca *CharacterAttributes) {$/;"	d
UpdateId	component/character/manager.go	/^func (cm *CharacterManager) UpdateId(id component.GOiD, ca *CharacterAttributes) {$/;"	f
Vec2	math/vec2.go	/^type Vec2 [2]float32$/;"	d
Vec2	math/vec2.go	/^type Vec2 [2]float32$/;"	t
Vec3	math/vec3.go	/^type Vec3 [3]float32$/;"	d
Vec3	math/vec3.go	/^type Vec3 [3]float32$/;"	t
Vec4	math/vec4.go	/^type Vec4 [4]float32$/;"	d
Vec4	math/vec4.go	/^type Vec4 [4]float32$/;"	t
Vector	common/vector.go	/^type Vector struct {$/;"	d
Vector	common/vector.go	/^type Vector struct {$/;"	t
WanderAi	component/ai/computer.go	/^func WanderAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	d
WanderAi	component/ai/computer.go	/^func WanderAi(cm *character.CharacterManager, sm component.SceneManager, em *event.EventManager, id component.GOiD, eventlink chan event.Event) {$/;"	f
WanderDecide	component/ai/computer.go	/^func WanderDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) {$/;"	d
WanderDecide	component/ai/computer.go	/^func WanderDecide(cm *character.CharacterManager, sm component.SceneManager, id component.GOiD) {$/;"	f
WavefrontData	res/manager.go	/^type WavefrontData struct {$/;"	d
WavefrontData	res/manager.go	/^type WavefrontData struct {$/;"	t
ai	component/ai/computer.go	/^package ai$/;"	p
ai	component/ai/manager.go	/^package ai$/;"	p
arg	component/character/player.go	/^		var arg string$/;"	d
attr	component/ai/computer.go	/^	var attr *character.CharacterAttributes$/;"	d
character	component/character/character.go	/^package character$/;"	p
character	component/character/delegates.go	/^package character$/;"	p
character	component/character/manager.go	/^package character$/;"	p
character	component/character/player.go	/^package character$/;"	p
chat	component/character/delegates.go	/^func chat(r, s component.GOiD, m string) {$/;"	d
chat	component/character/delegates.go	/^func chat(r, s component.GOiD, m string) {$/;"	f
cols	math/mat4x4.go	/^\/\/      var cols [4]Vec4$/;"	d
command	component/ai/computer.go	/^	var command string$/;"	d
commandLineReader	betuol.go	/^func commandLineReader(commandlink chan string) {$/;"	d
commandLineReader	betuol.go	/^func commandLineReader(commandlink chan string) {$/;"	f
common	common/log.go	/^package common$/;"	p
common	common/queue.go	/^package common$/;"	p
common	common/stack.go	/^package common$/;"	p
common	common/vector.go	/^package common$/;"	p
comp	component/character/manager.go	/^	var comp struct {$/;"	d
component	component/component.go	/^package component$/;"	p
creationFunction	component/gofactory/manager.go	/^type creationFunction func(component.GOiD, []byte) error$/;"	d
creationFunction	component/gofactory/manager.go	/^type creationFunction func(component.GOiD, []byte) error$/;"	t
creationManager	component/gofactory/manager.go	/^type creationManager struct {$/;"	d
creationManager	component/gofactory/manager.go	/^type creationManager struct {$/;"	t
decodeVec3String	betuol.go	/^func decodeVec3String(vec3 string) math.Vec3 {$/;"	d
decodeVec3String	betuol.go	/^func decodeVec3String(vec3 string) math.Vec3 {$/;"	f
event	event/events.go	/^package event$/;"	p
event	event/manager.go	/^package event$/;"	p
eventType	event/manager.go	/^\/\/ RegisterListener registers a listening function to be called every time an event of type eventType is processed.$/;"	d
eventType	event/manager.go	/^\/\/ RegisterListeningChannel registers a listening channel to be sent the event every time an event of type eventType is processed.$/;"	d
events	event/manager.go	/^	var events []interface{}$/;"	d
frust	math/frustum.go	/^	var frust Frustum$/;"	d
getNewGOiD	component/gofactory/manager.go	/^func (gof *GameObjectFactory) getNewGOiD() component.GOiD {$/;"	d
getNewGOiD	component/gofactory/manager.go	/^func (gof *GameObjectFactory) getNewGOiD() component.GOiD {$/;"	f
gofactory	component/gofactory/manager.go	/^package gofactory$/;"	p
graphics	component/graphics/handlers.go	/^package graphics$/;"	p
graphics	component/graphics/manager.go	/^package graphics$/;"	p
graphics	graphics/graphics.go	/^package graphics$/;"	p
graphics	graphics/text.go	/^package graphics$/;"	p
idQueue	component/gofactory/manager.go	/^	var idQueue common.Queue$/;"	d
idToUse	component/gofactory/manager.go	/^	var idToUse component.GOiD$/;"	d
information	component/component.go	/^\/\/ Type used to specify the type information and quantity of an entity on a map.$/;"	d
init	common/log.go	/^func init() {$/;"	d
init	common/log.go	/^func init() {$/;"	f
init	math/frustum.go	/^func (frust *Frustum) init() {$/;"	d
init	math/frustum.go	/^func (frust *Frustum) init() {$/;"	f
instance	instance/instance.go	/^package instance$/;"	p
instance	instance/interface.go	/^package instance$/;"	p
instance	instance/script.go	/^package instance$/;"	p
is	betuol.go	/^	var is instance.IInstance = instance.MakeInstance(rm)$/;"	d
logWriter	common/log.go	/^type logWriter struct {$/;"	d
logWriter	common/log.go	/^type logWriter struct {$/;"	t
main	betuol.go	/^func main() {$/;"	d
main	betuol.go	/^func main() {$/;"	f
main	betuol.go	/^package main$/;"	p
math	math/frustum.go	/^package math$/;"	p
math	math/mat2x2.go	/^package math$/;"	p
math	math/mat4x4.go	/^package math$/;"	p
math	math/plane.go	/^package math$/;"	p
math	math/sphere.go	/^package math$/;"	p
math	math/vec2.go	/^package math$/;"	p
math	math/vec3.go	/^package math$/;"	p
math	math/vec4.go	/^package math$/;"	p
maxDistanceSqrd	res/manager.go	/^	var maxDistanceSqrd float32$/;"	d
moveOverTime	component/scenemanager/manager.go	/^type moveOverTime struct {$/;"	d
moveOverTime	component/scenemanager/manager.go	/^type moveOverTime struct {$/;"	t
moveQuestTicker	component/quest/states.go	/^var moveQuestTicker int$/;"	d
moveQuestTicker	component/quest/states.go	/^var moveQuestTicker int$/;"	v
normDot	math/plane.go	/^	var normDot float32$/;"	d
normal	math/plane.go	/^	var normal [4]float32$/;"	d
obj	component/ai/manager.go	/^	var obj struct {$/;"	d
obj	component/physics/manager.go	/^	var obj struct {$/;"	d
obj	res/manager.go	/^	var obj []component.MapLocation$/;"	d
obj	res/manager.go	/^	var obj struct {$/;"	d
of	component/ai/manager.go	/^\/\/ Higher level creation functions extract the type of ai computer to be used for the component from a data source and pass the low level information to CreateComponent in order to do the real work of initialization.$/;"	d
parseSysConsole	betuol.go	/^func parseSysConsole(is instance.IInstance, player component.GOiD, commandlink chan string) bool {$/;"	d
parseSysConsole	betuol.go	/^func parseSysConsole(is instance.IInstance, player component.GOiD, commandlink chan string) bool {$/;"	f
physics	component/physics/manager.go	/^package physics$/;"	p
quest	component/quest/manager.go	/^package quest$/;"	p
quest	component/quest/states.go	/^package quest$/;"	p
queueNode	common/queue.go	/^type queueNode struct {$/;"	d
queueNode	common/queue.go	/^type queueNode struct {$/;"	t
res	res/manager.go	/^package res$/;"	p
resizeArray	component/ai/manager.go	/^func (am *AiManager) resizeArray(index component.GOiD) {$/;"	d
resizeArray	component/ai/manager.go	/^func (am *AiManager) resizeArray(index component.GOiD) {$/;"	f
resizeArray	component/scenemanager/manager.go	/^func (tm *TransformManager) resizeArray(index component.GOiD) {$/;"	d
resizeArray	component/scenemanager/manager.go	/^func (tm *TransformManager) resizeArray(index component.GOiD) {$/;"	f
resizeArrays	component/character/manager.go	/^func (cm *CharacterManager) resizeArrays(index component.GOiD) {$/;"	d
resizeArrays	component/character/manager.go	/^func (cm *CharacterManager) resizeArrays(index component.GOiD) {$/;"	f
resizeArrays	component/physics/manager.go	/^func (pm *PhysicsManager) resizeArrays(index component.GOiD) {$/;"	d
resizeArrays	component/physics/manager.go	/^func (pm *PhysicsManager) resizeArrays(index component.GOiD) {$/;"	f
resizeArrays	graphics/text.go	/^func (tgh *TextGraphicsHandler) resizeArrays(id component.GOiD) {$/;"	d
resizeArrays	graphics/text.go	/^func (tgh *TextGraphicsHandler) resizeArrays(id component.GOiD) {$/;"	f
row1	math/vec3.go	/^	var row1, row2, row3 float32$/;"	d
row1	math/vec4.go	/^	var row1, row2, row3, row4 float32$/;"	d
rows	math/mat4x4.go	/^\/\/      var rows [4]Vec4$/;"	d
scenemanager	component/scenemanager/manager.go	/^package scenemanager$/;"	p
segs	math/mat4x4.go	/^	var segs [4]Mat2x2 \/\/ four corner 2x2 matrices$/;"	d
stackNode	common/stack.go	/^type stackNode struct {$/;"	d
stackNode	common/stack.go	/^type stackNode struct {$/;"	t
tmp	common/queue.go	/^	var tmp *queueNode = stk.tail$/;"	d
to	component/ai/manager.go	/^\/\/ RegisterComputer will register an ai computer type to be used for component initialization.$/;"	d
used	component/component.go	/^\/\/ GOiD stands for GameObject ID. It is the type used by all component managers to represent a specific GameObject.$/;"	d
with	component/gofactory/manager.go	/^\/\/ The compType string passed as an argument is used to assosiate a component type with the component manager.$/;"	d
